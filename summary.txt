Foraging is a fundamental behavior of animals. However, its neural basis are
not well understood. At the Sainsbury Wellcome Centre and Gatsby Computational
Neuroscience Unit, University College London, we are building computational
infrastructure to continuously monitor (24 hours a day, 7 days a week) the
behavioral and neural activity of mice, as they freely forage in a large arena
containing patches delivering food rewards.

Here we describe, and carefully evaluate, computer vision, statistical
inference and learning methods that we used to estimate positions, velocities
and accelerations of mice foraging in this arena. We also provide a repository
with Python code implementing this functionality and scripts to reproduce the
figures in this poster.

Positions (x and y coordinates) of a mouse were measured while it
foraged in a circular arena (diameter 2 meters) with two food patches.
Each food patch contained a wheel that the mouse needed to rotate a given
distance (e.g., 1 meter) to obtain a pellet of food reward. Measurements ware
obtained in a well lighted environment with a video camera (Spinnaker Blackfly
S, model BFS-U3-16S2M, 50 Hz) located above the center of the arena.

We used a linear dynamical system model with a six-dimensional state (position,
velocity, acceleration in the x and y coordinates). The dynamics of the state
followed the Discrete Time Wiener Process Acceleration model (Bar-Shalom et
al., 01). The measurement equation extracted the positions in x and y and added
Gaussian white noise.

Simulated data was generated by sampling measurements from the previous model.

We first evaluated the accuracy of the proposed tracking methods with simulated
data, for which we knew the true positions, velocities and accelerations. Then
we used real measurements from a foraging mouse.

We measure the root-means-square error between the true positions, velocities
and accelerations and those estimated by the Kalman filter, Kalman smoother and
a baseline finite differences method. We compared the performance of Kalman
filters and smoothers with manually chosen and learned parameters (maximum
likelihood).

With simulated data we observed that the Kalman filter and smoother provided
more accurate estimates of velocities and accelerations than the baseline
finite differences method and that Kalman filter. We also obtained more
accurate estimates with learned than with manually set parameters.

An advantage of the Kalman filter is that it allows life tracking (i.e., while
the experiment is being performed). A disadvantage is that its tracking
accuracy is substantially lower than that of the Kalman smoother.

The Kalman smoother was more accurate than the Kalman filter.
With real measurements we used functions in the OpenCV library (e.g.,
thresholding, dilation, contour finding) to estimate the position of the mouse
in each video frame.

We found that the estimated velocities and accelerations by the
Kalman filter and smoother, and those from the baseline finite-difference
method, were substantially different, and these differences followed similar
patterns as with simulated data. This suggest that the Kalman filter and
smoother estimates are more accurate than those of the finite difference
method.

An additional advantage of the Kalman filter and smoother is that it allowed
to infer missing measurements, where the mouse was occluded by objects in the
arena.

As with simulated data, accuracy of the Kalman smoother was greater than that
of the Kalman filter (e.g., at times of missing observations the Kalman filter
went astray while the Kalman smoother provided reasonable estimates).

Real measurements were obtained in a well controlled and well illuminated
environment, and their noise level was low. For these measurements learned
parameters did not yielded substantial improvements, in comparison with manually
chosen ones.

Reproducibility is paramount in science. We provide code and sample data to
reproduce all figures in this poster.

